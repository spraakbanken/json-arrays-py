name: CI

on:
  push:
    branches-ignore:
      - "main"
    tags-ignore:
      - v*
  pull_request:
    branches:
      - "**/*"

env:
  POETRY_VERSION: "1.3.1"
  MINIMUM_PYTHON_VERSION: "3.8"

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.task.name }} py-${{ env.MINIMUM_PYTHON_VERSION }} ${{ matrix.json-lib }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # Only run checks for ubuntu
        os: [ubuntu-latest]
        json-lib: [orjson, json]
        task:
          - name: Type check
            run: make type-check
          - name: Check formatting
            run: make check-fmt
          - name: Lint code
            run: make lint
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/ci.yml')}}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          poetry install --only ci
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Install json library, if not using stock
      #----------------------------------------------
      - name: Install json library
        if: matrix.json-lib != 'json'
        run: make install-${{ matrix.json-lib }}
      #----------------------------------------------
      # Run matrix task
      #----------------------------------------------
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}
