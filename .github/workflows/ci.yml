name: CI

on:
  push:
  pull_request:
  merge_group:

permissions:
  contents: read

env:
  MINIMUM_PYTHON_VERSION: "3.9"

jobs:
  lint:
    name: ${{ matrix.task.name }} ${{ matrix.json-lib }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # Only run checks for ubuntu
        os: [ubuntu]
        json-lib: [orjson]
        task:
          - name: Type check
            run: make type-check
          - name: Check formatting
            run: make check-fmt
          - name: Lint code
            run: make lint

    runs-on: ${{ matrix.os }}-latest

    steps:
      #----------------------------------------------
      #       check-out repo
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      
      #----------------------------------------------
      #  -----  install & configure python & rye  -----
      #----------------------------------------------
      - name: Set up the environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
          cache-extra-key: ${{ matrix.json-lib }}
       
      #----------------------------------------------
      # Install json library, if not using stock
      #----------------------------------------------
      - name: Install json library
        if: matrix.json-lib != 'json'
        run: make install-dev-${{ matrix.json-lib }}
      #----------------------------------------------
      # Run matrix task
      #----------------------------------------------
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

  coverage:
    name: Test coverage py-${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # ignore windows for now
        os: [ubuntu] #, macos] # , windows-latest]
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        json-lib: [orjson, json]

    continue-on-error: >-
      ${{ contains(matrix.python-version, 'dev') && true || false }}

    runs-on: ${{ matrix.os }}-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4

      #----------------------------------------------
      #  -----  install & configure python & rye  -----
      #----------------------------------------------
      - name: Set up the environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}
          cache-extra-key: ${{ matrix.json-lib }}
     
      #----------------------------------------------
      # Install json library, if not using stock
      #----------------------------------------------
      - name: Install json library
        if: matrix.json-lib != 'json'
        run: make install-dev-${{ matrix.json-lib }}
      #----------------------------------------------
      # Run tests and upload coverage
      #----------------------------------------------
      - name: Run tests for coverage
        run: make cov_report=xml test-w-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # directory: ./coverage/reports/
          # env_vars: OS,PYTHON
          fail_ci_if_error: true
          # files: ./coverage1.xml,./coverage2.xml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true

   # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [lint, coverage]
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          # allowed-failures: coverage

  build:
    name: Build package
     # only run on push to main and on release
    if: success() && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install rye
        id: setup-rye
        uses: eifinger/setup-rye@f8f2ca26808cdffef0b77c4fddf4305a5e5b010a

      #----------------------------------------------
      #  -----  build distribution -----
      #----------------------------------------------
      - name: Build distribution
        run: rye build

      #----------------------------------------------
      #  -----  upload artifacts  -----
      #----------------------------------------------
      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  test-build:
    name: test build on ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: rm -r src/json_streams
      - run: pip install typing-extensions
      - run: pip install -r tests/requirements.txt
      - run: pip install json-streams --no-index --no-deps --find-links dist --force-reinstall
      - run: pytest

  publish:
    needs: [check, test-build]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
